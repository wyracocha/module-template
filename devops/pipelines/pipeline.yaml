stages:
- stage: Security
  condition: eq(variables.SECURITY_STAGE, true)
  jobs:
  - job: configuration
    workspace:
      clean: all
    steps:
    - checkout: self
      clean: "true"
    - script: docker run --tty --rm -v "$PWD:/app" -w /app bridgecrew/checkov --directory /app
      displayName: Checkov
    - script: docker run --tty --rm -v "$PWD:/app" aquasec/tfsec /app
      displayName: TFSec
- stage: Validation
  condition: eq(variables.VALIDATION_STAGE, true)
  jobs:
  - job: Lint
    workspace:
      clean: all
    steps: 
    - checkout: self
      clean: "true"
    - script: docker run --rm -v "$PWD:/app" -w /app  -e TF_TOKEN_artifactoryibk_jfrog_io=${{ parameters.artifactory_token_modules }} hashicorp/terraform init
      displayName: Terraform init
    - script: docker run --rm -v "$PWD:/app" -w /app  -e TF_TOKEN_artifactoryibk_jfrog_io=${{ parameters.artifactory_token_modules }} hashicorp/terraform validate
      displayName: Terraform validate
    - script: docker run --rm -v "$PWD:/app" -w /app  -e TF_TOKEN_artifactoryibk_jfrog_io=${{ parameters.artifactory_token_modules }} hashicorp/terraform fmt -recursive
      displayName: Terraform fmt
    - script: docker run --rm -v "$PWD:/app" -w /app  -e TF_TOKEN_artifactoryibk_jfrog_io=${{ parameters.artifactory_token_modules }} ghcr.io/terraform-linters/tflint
      displayName: Terraform lint
- stage: Test
  dependsOn: Validation
  condition: eq(variables.TEST_STAGE, true)
  jobs:
  - job: terratest
    workspace:
      clean: all
    steps:
    - checkout: self
      clean: "true" 
    - script:  docker run --rm -v "$PWD:/app" -w /app/test -e TF_TOKEN_artifactoryibk_jfrog_io=${{ parameters.artifactory_token_modules }} devildeveloper/terratest go mod init ibk/aks
      displayName: Initializing repo
    - script:  docker run --rm -v "$PWD:/app" -w /app/test -e TF_TOKEN_artifactoryibk_jfrog_io=${{ parameters.artifactory_token_modules }} devildeveloper/terratest go mod tidy
      displayName: Tidy repo
    - task: AzureCLI@2
      displayName: Testing
      inputs:
        azureSubscription: sceu2c011dsosnbx01
        scriptType: bash
        scriptLocation: inlineScript
        addSpnToEnvironment: true
        inlineScript: |
          docker run --rm -v "$PWD:/app" -w /app/test \
            -e TF_TOKEN_artifactoryibk_jfrog_io=${{ parameters.artifactory_token_modules }} \
            -e ARM_SUBSCRIPTION_ID=$(az account show --query id --output tsv) \
            -e ARM_CLIENT_ID=$servicePrincipalId \
            -e ARM_TENANT_ID=$tenantId \
            -e ARM_CLIENT_SECRET=$servicePrincipalKey devildeveloper/terratest go test -v -timeout 30m
- stage: DEPLOY
  dependsOn: Test
  condition: eq(variable.DEPLOY_STAGE, true)
  jobs:
  - job: Deploy
    workspace:
      clean: all
    steps:
    - checkout: self
      path: terraformModule
      clean: "true"
    - script: |
        zip -r build.zip . -x ".git/*" "devops/*" "test/*" "provider.tf"
      displayName: Zip package
    - task: Bash@3
      displayName: "Artifactory: Upload Artifact"
      inputs:
        targetType: filePath
        filePath: $(Pipeline.Workspace)/terraformModule/${{ parameters.template_alias }}/src/steps/azure/bash/upload_to_artifactory.sh
      env:
        ARTIFACTORY_USER: ${{ parameters.artifactory_user }}
        ARTIFACTORY_TOKEN: ${{ parameters.artifactory_token }}
        ARTIFACTORY_URL: ${{ parameters.artifactory_url }}
        ARTIFACTORY_REPO: ${{ parameters.artifactory_repo }}
        ARTIFACTORY_NAMESPACE: ${{ parameters.artifactory_namespace }}
        ARTIFACTORY_MODULE_NAME: ${{ parameters.artifactory_module_name }}
        ARTIFACTORY_MODULE_PROVIDER: ${{ parameters.artifactory_module_provider }}
        FILE_PATH: $(Pipeline.Workspace)/${{ parameters.artifact_name }}
        FILE_NAME: $(Build.SourceBranchName)
