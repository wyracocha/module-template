
##BIENVENIDO AL YML DE DECLARACION DE ACCIONES DE AZ PIPELINES
trigger:
- main
pool:
  vmImage: 'ubuntu-18.04'

variables:
- name: LAYER
  value: 'shared-services'
- name: ENVIRONMENT
  value: 'dev'
- name: STR_ACT
  value: 'stsharedsvcdev100eu2'
- name: RSC_GROUP_BACKEND
  value: 'RG-SHAREDSVC-DEV-100-EU2-ARQSOP'
- name: SERVICE_ACCOUNT
  value: 'sp-arqsop-sharedservices-dev-001-devops'
- name: SUBSCRIPTION_ID
  value: 'd32248ab-7cca-4946-9991-f94c7ba40ebd'
- name: RSC_GROUP
  value: 'RG-SHARED-DEV-001-EU2-ARQSOP'

stages:
- stage: PLAN_STAGE_${{ variables.ENVIRONMENT }}
  displayName: PLAN_STAGE_${{ variables.ENVIRONMENT }}
  jobs:
    - deployment: APROBACION_INICIO_${{ variables.ENVIRONMENT }}
      environment: PIPELINE-MANAGER
    - job: PLAN_STAGE_${{ variables.ENVIRONMENT }}
      continueOnError: false
      dependsOn: APROBACION_INICIO_${{ variables.ENVIRONMENT }}
      steps:
      - checkout: self
      - checkout: git://PLATAFORMA-DE-SOPORTE-CC/IAAC-MODULES-REPOSITORY@main-fase2
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
        inputs:
          terraformVersion: '0.14.10'
      - task: TerraformCLI@0
        displayName: INIT
        inputs:
          backendType: azurerm
          command: init
          workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/'
          backendServiceArm: '${{ variables.SERVICE_ACCOUNT }}'
          backendAzureRmResourceGroupName: '${{ variables.RSC_GROUP_BACKEND }}'
          backendAzureRmStorageAccountName: '${{ variables.STR_ACT }}'
          backendAzureRmContainerName: '${{ variables.LAYER }}-${{ variables.ENVIRONMENT }}'
          backendAzureRmKey: 'terraform_base.tfstate'
          backendAzureRmSubscriptionId: '${{ variables.SUBSCRIPTION_ID }}'
      - task: TerraformTaskV1@0
        displayName: VALIDATE
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/'
      - task: TerraformTaskV1@0
        displayName: PLAN
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/'
          environmentServiceNameAzureRM: '${{ variables.SERVICE_ACCOUNT }}'
      - task: Bash@3
        displayName: state2
        inputs:
            workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/'
            targetType: 'inline'
            script: 'FILE=terraform_test.tfstate; if [ -f "$FILE" ]; then terraform state list ; fi; ls'
     #- task: TerraformCLI@0
     #  displayName: 'terraform state list'
     #  inputs:
     #    command: state
     #    stateSubCommand: list
     #    workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/'


- stage: APPLY_STAGE_${{ variables.ENVIRONMENT }}
  dependsOn: PLAN_STAGE_${{ variables.ENVIRONMENT }}
  displayName: APPLY_STAGE_${{ variables.ENVIRONMENT }}
  jobs:
    - deployment: APROBACION_APPLY_${{ variables.ENVIRONMENT }}
      environment: TF-ACTIONS
    - job: APPLY_STAGE_${{ variables.ENVIRONMENT }}
      timeoutInMinutes: 480
      continueOnError: false
      dependsOn: APROBACION_APPLY_${{ variables.ENVIRONMENT }}
      steps:
      - checkout: self
      - checkout: git://PLATAFORMA-DE-SOPORTE-CC/IAAC-MODULES-REPOSITORY@main-fase2
      - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
        inputs:
          terraformVersion: '0.14.10'
      - task: TerraformCLI@0
        displayName: INIT
        inputs:
          backendType: azurerm
          command: init
          workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/'
          backendServiceArm: '${{ variables.SERVICE_ACCOUNT }}'
          backendAzureRmResourceGroupName: '${{ variables.RSC_GROUP_BACKEND }}'
          backendAzureRmStorageAccountName: '${{ variables.STR_ACT }}'
          backendAzureRmContainerName: '${{ variables.LAYER }}-${{ variables.ENVIRONMENT }}'
          backendAzureRmKey: 'terraform_base.tfstate'
          backendAzureRmSubscriptionId: '${{ variables.SUBSCRIPTION_ID }}'
      - task: TerraformTaskV1@0
        displayName: APPLY
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/'
          environmentServiceNameAzureRM: '${{ variables.SERVICE_ACCOUNT }}'

