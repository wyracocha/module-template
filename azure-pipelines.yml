
##BIENVENIDO AL YML DE DECLARACION DE ACCIONES DE AZ PIPELINES
trigger:
- main
pool:
  vmImage: 'ubuntu-18.04'

variables:
- name: LAYER
  value: 'data-integration'
- name: ENVIRONMENT
  value: 'prod'
- name: STR_ACT
  value: 'stdataintprod100eu2'
- name: RSC_GROUP_BACKEND
  value: 'RG-DATAINT-PROD-100-EU2-ARQSOP'
- name: SERVICE_ACCOUNT
  value: 'sp-arqsop-dataintegration-prod-001-devops'
- name: SUBSCRIPTION_ID
  value: 'f3a8e4e5-ca50-4147-a574-0c289f9fb6a0'
- name: RSC_GROUP
  value: 'RG-DATAINT-PROD-001-EU2-ARQSOP'
- name: RSC_GROUP_2
  value: 'RG-DATAINT-PROD-001-CU1-ARQSOP'

stages:
- stage: PLAN_STAGE_${{ variables.ENVIRONMENT }}
  displayName: PLAN_STAGE_${{ variables.ENVIRONMENT }}
  jobs:
    - deployment: APROBACION_INICIO_${{ variables.ENVIRONMENT }}
      environment: PIPELINE-MANAGER
    - job: PLAN_STAGE_${{ variables.ENVIRONMENT }}
      continueOnError: false
      dependsOn: APROBACION_INICIO_${{ variables.ENVIRONMENT }}
      steps:
      - checkout: self
      - checkout: git://PLATAFORMA-DE-SOPORTE-CC/IAAC-MODULES-REPOSITORY@main-fase2
      - task: TerraformInstaller@0
        inputs:
          terraformVersion: '0.14.10'
      - task: TerraformTaskV1@0
        displayName: INIT
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/'
          backendServiceArm: '${{ variables.SERVICE_ACCOUNT }}'
          backendAzureRmResourceGroupName: '${{ variables.RSC_GROUP_BACKEND }}'
          backendAzureRmStorageAccountName: '${{ variables.STR_ACT }}'
          backendAzureRmContainerName: '${{ variables.LAYER }}-${{ variables.ENVIRONMENT }}'
          backendAzureRmKey: 'terraform_base.tfstate'
      - task: TerraformTaskV1@0
        displayName: VALIDATE
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/'
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: 'terraform state list'
      - task: TerraformTaskV1@0
        displayName: PLAN
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/'
          environmentServiceNameAzureRM: '${{ variables.SERVICE_ACCOUNT }}'

- stage: APPLY_STAGE_${{ variables.ENVIRONMENT }}
  dependsOn: PLAN_STAGE_${{ variables.ENVIRONMENT }}
  displayName: APPLY_STAGE_${{ variables.ENVIRONMENT }}
  jobs:
    - deployment: APROBACION_APPLY_${{ variables.ENVIRONMENT }}
      environment: TF-ACTIONS
    - job: APPLY_STAGE_${{ variables.ENVIRONMENT }}
      continueOnError: false
      dependsOn: APROBACION_APPLY_${{ variables.ENVIRONMENT }}
      steps:
      - checkout: self
      - checkout: git://PLATAFORMA-DE-SOPORTE-CC/IAAC-MODULES-REPOSITORY@main-fase2
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: 'wget -q https://packages.microsoft.com/config/ubuntu/18.10/packages-microsoft-prod.deb && sudo dpkg -i packages-microsoft-prod.deb'
      - task: TerraformInstaller@0
        inputs:
          terraformVersion: '0.14.10'
      - task: TerraformTaskV1@0
        displayName: INIT
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/'
          backendServiceArm: '${{ variables.SERVICE_ACCOUNT }}'
          backendAzureRmResourceGroupName: '${{ variables.RSC_GROUP_BACKEND }}'
          backendAzureRmStorageAccountName: '${{ variables.STR_ACT }}'
          backendAzureRmContainerName: '${{ variables.LAYER }}-${{ variables.ENVIRONMENT }}'
          backendAzureRmKey: 'terraform_base.tfstate'
      - task: TerraformTaskV1@0
        displayName: APPLY
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/'
          environmentServiceNameAzureRM: '${{ variables.SERVICE_ACCOUNT }}'

#- stage: SECURITY_VERIFICATION_STAGE_${{ variables.ENVIRONMENT }}
#  dependsOn: APPLY_STAGE_${{ variables.ENVIRONMENT }}
#  displayName: SECURITY_STAGE_${{ variables.ENVIRONMENT }}
#  pool:
#    vmImage: 'windows-2019'
#  jobs:
#    - job: SECURITY_VERIFICATION_STAGE_${{ variables.ENVIRONMENT }}
#      continueOnError: true
#      steps:
#      - task: AzSKSVTs@4
#        inputs:
#          ConnectedServiceNameARM: '${{ variables.SERVICE_ACCOUNT }}'
#          GenerateMethodParameterSetSelection: 'ResourceGroupName'
#          ResourceGroupName: '${{ variables.RSC_GROUP }}'
#          SubscriptionId: '${{ variables.SUBSCRIPTION_ID }}'
#          EnableOMSLogging: false
#          AggregateControlsStatus: false
#      - task: AzSKSVTs@4
#        inputs:
#          ConnectedServiceNameARM: '${{ variables.SERVICE_ACCOUNT }}'
#          GenerateMethodParameterSetSelection: 'ResourceGroupName'
#          ResourceGroupName: '${{ variables.RSC_GROUP_2 }}'
#          SubscriptionId: '${{ variables.SUBSCRIPTION_ID }}'
#          EnableOMSLogging: false
#          AggregateControlsStatus: false

#- stage: DESTROY_STAGE_${{ variables.ENVIRONMENT }}
#  displayName: DESTROY_STAGE_${{ variables.ENVIRONMENT }}
#  jobs:
#    - deployment: APROBACION_DESTROY_${{ variables.ENVIRONMENT }}
#      environment: TF-ACTIONS
#    - job: DESTROY_STAGE_${{ variables.ENVIRONMENT }}
#      continueOnError: false
#      dependsOn: APROBACION_DESTROY_${{ variables.ENVIRONMENT }}
#      steps:
#      - checkout: self
#      - checkout: git://PLATAFORMA-DE-SOPORTE-CC/IAAC-MODULES-REPOSITORY@main-fase2
#      - task: TerraformInstaller@0
#        inputs:
#          terraformVersion: '0.14.10'
#      - task: TerraformTaskV1@0
#        displayName: INIT
#        inputs:
#          provider: 'azurerm'
#          command: 'init'
#          workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/'
#          backendServiceArm: '${{ variables.SERVICE_ACCOUNT }}'
#          backendAzureRmResourceGroupName: '${{ variables.RSC_GROUP_BACKEND }}'
#          backendAzureRmStorageAccountName: '${{ variables.STR_ACT }}'
#          backendAzureRmContainerName: '${{ variables.LAYER }}-${{ variables.ENVIRONMENT }}'
#          backendAzureRmKey: 'terraform_base.tfstate'
#      - task: TerraformTaskV1@0
#        displayName: DESTROY
#        inputs:
#          provider: 'azurerm'
#          command: 'destroy'
#          workingDirectory: '$(System.DefaultWorkingDirectory)/$(Build.Repository.Name)/'
#          environmentServiceNameAzureRM: '${{ variables.SERVICE_ACCOUNT }}'
